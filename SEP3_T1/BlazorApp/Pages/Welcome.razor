@* @page "/Welcome" *@
@* <AuthorizeView> *@
@*     <Authorized> *@
@*         <h1>THIS IS A Welcome Page</h1> *@
@*     </Authorized> *@
@*     <NotAuthorized> *@
@*         <h1>Please login to see the welcome</h1> *@
@*     </NotAuthorized> *@
@* </AuthorizeView> *@
@* *@
@* *@
@* @code { *@
@*      *@
@* } *@

@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using Entities
@using System.Text.Json
@using BlazorApp.Services.Hub
@using Entities.Model
@using Microsoft.AspNetCore.Components
@using Microsoft.VisualBasic
@page "/Welcome"
@inject HubService HubService;
<h3>Chat</h3>

@if (!online) {
    //Insert Login Component
    <input type="text" @bind="@myself.Name" />
    <button type="button" onclick="@LaunchChat">Start</button>

    @if (information != null) {
        <p>@information</p>
    }
}
else {
    //Insert Header with user information
    <h1>@myself.Name</h1>
    <div class="alert alert-danger">
        @foreach (var message in messages) {
            <div>
                <h6>@message.Header.CreatedBy.Name</h6>
                <p>@message.Body</p>
            </div>
        }
    </div>
    <textarea placeholder="write your message" @bind="newMessage" @bind:event="oninput"></textarea>
    <button @onclick="@(() => SendMessage(newMessage))">Send</button>
}

@code {

    private bool online = false;

    private User myself = new User("test", "test", "test@test.com", "dfsa", "asd"); // JUST INITIALIZING

    private string information; // information to be shown on screen

    private string newMessage;

    List<Message> messages = new List<Message>();
    


    private Timer timer;


    public async Task LaunchChat() {

        try {
            //Set the timer refresh
            timer = new Timer((state => InvokeAsync(StateHasChanged)), null, 0, 1);

            online = true;
            await Task.Delay(1);

            //Remove old Messages
            messages.Clear();


            //Start the connection

            // HubConnection = new HubConnectionBuilder().WithUrl("https://localhost:7777/chat").Build();
            // HubConnection.On<string>("Broadcast", ReceiveMessage);
            
            // await HubService.GetHubConnection().StartAsync();
        }
        catch (Exception e) {
            information = e.Message;
            online = false;
        }
    }


    private void ReceiveMessage(string messageInJson) {

        //Convert Message from Json
        Message message = JsonSerializer.Deserialize<Message>(messageInJson, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        })!;

        messages.Add(message);
        StateHasChanged();
    }


    private async Task SendMessage(string message) {

        Message messageToSend = new Message(myself, new Guid(), newMessage); // Create the new Message

        string messageAsJson = JsonSerializer.Serialize(messageToSend);         //Convert the messaje to Json

        if (online) {
            await HubService.GetHubConnection().SendAsync("Broadcast", messageAsJson);
            newMessage = "";
        }
    }

}