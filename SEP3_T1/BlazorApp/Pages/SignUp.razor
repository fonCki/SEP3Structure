@page "/SignUp"
@using BlazorApp.Authentication
@using Contracts.Services
@using BlazorApp.Shared.MicroComponents
@inject IUserService userService
@inject NavigationManager navMgr
@inject IAuthService authService

<AuthorizeView>
    <NotAuthorized>
        <div class="shape-container">
            <div class="sign-up-card">
                <ChangeableAvatar newImage="@UpdateAvatar" newError="@UpdateError" actualImage="@imagePath" />
                <div class="form-group">
                    <input class="form-control" type="text" id="fname" placeholder="Name" @bind="name" @onkeydown="@Enter"/>
                    <input class="form-control" type="text" id="lname" placeholder="Last Name" @bind="lname" @onkeydown="@Enter"/>
                    <input class="form-control" type="text" id="email" placeholder="Email" @bind="email" @onkeydown="@Enter"/>
                    <input class="form-control" type="password" placeholder="Password" @bind="password" @onkeydown="@Enter"/>
                    <input class="form-control" type="password" placeholder="Re Password" @bind="rePassword" @onkeydown="@Enter"/>
                    <button type="submit" class="btn btn-primary" @onclick="SignUpAsync">Sign Up</button> 
                    <p class="error-label">
                        @if (!string.IsNullOrEmpty(errorLabel))@errorLabel
                    </p>
                </div>
                <div>
                    <p class="create-account">Already have an account? <b><a href="/login">Log in</a></b></p>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string name = string.Empty;
    private string lname = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string rePassword = string.Empty;
    private string imagePath = "images/-user-login.png";
    private string errorLabel;

    private async Task SignUpAsync()
    {
        try {
            await userService.SignUp(name, lname, email, password, imagePath);
        }
        catch (Exception e)
        {
            errorLabel = $"Error: {e.Message}";
        }
        await authService.LoginAsync(email, password);
        navMgr.NavigateTo("/");

    }

    private async void Enter(KeyboardEventArgs e) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {
             await SignUpAsync();
        }
        
    }

    public void UpdateAvatar(string newPath) {
        imagePath = newPath;

    }

    public void UpdateError(string newError) {
        errorLabel = newError;
        StateHasChanged();
    }
    
}