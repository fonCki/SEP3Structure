@using BlazorApp.Shared.Components
@using Contracts.Services
@using Entities.Model
@using System.Runtime.Intrinsics.Arm
@using BlazorApp.Authentication
@inject IUserService UserService
@inject IChatService ChatService
@inject NavigationManager NavMgr
@inject IAuthService AuthService
@page "/Chat/{email?}"

<AuthorizeView>
    <Authorized>
        <main class="right-box">
            @if (TheChat != null) {
                @if (User.RUI.Equals(AuthService.MyUser.RUI)) {
                    <h1>@error</h1>
                }
                else {
                    <CascadingValue Value="@TheChat">
                        <CascadingValue Value="@User">
                            <HeaderRight/>
                            <MessageArea/>
                            <InputArea/>
                        </CascadingValue>
                    </CascadingValue>
                }
            }
            else {
                <h1>USER DOES NOT EXIST</h1>
            }
        </main>
    </Authorized>
    <NotAuthorized>
        @{NavMgr.NavigateTo("/login"); }
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string Email { get; set; }
    
    public User User { get; set; }
    
    Entities.Model.Chat TheChat { get; set; }

    string error = String.Empty;
    
    protected override void OnParametersSet()
    {
        Email = Email ?? "all"; //TODO WTF IS THIS?
    }
    
    protected async override Task OnInitializedAsync() {
        try {
            User = await UserService.GetUserAsyncByEmail(Email);
            TheChat = await ChatService.GetOrCreateChat(AuthService.MyUser, User);
        }
        catch (Exception e) {
            error = e.Message;
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender) {
        ChatService.MarkAsRead(TheChat.CID, AuthService.MyUser);
    }

}    
