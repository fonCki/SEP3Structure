@using BlazorApp.Shared.Components
@using Contracts.Services
@using Entities.Model
@using System.Runtime.Intrinsics.Arm
@using System.Text.Json
@using BlazorApp.Authentication
@using BlazorApp.Services
@using Contracts.Services.Hub
@using Contracts.Services.Refresh
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject IUserService UserService
@inject IChatService ChatService
@inject NavigationManager NavMgr
@inject IAuthService AuthService
@page "/chatApp/{email?}"
@inject IToastService ToastService
@inject HubService HubService
@inject IRefreshService RefreshService;


<AuthorizeView>
    <Authorized>
        @if (Chat != null) {
            <CascadingValue Value="HubService">
                <main class="main">
                    <div class="left-menu">
                        <CascadingValue Value="SelectedChat">
                            <CascadingValue Value="SelectedUser">
                                <LeftMain/>
                            </CascadingValue>
                            </CascadingValue>
                    </div>
                    <div class="chat-area">
                        <ChatArea Chat="Chat"/>
                    </div>
                </main>
            </CascadingValue>
        }
    </Authorized>
    <NotAuthorized>
        @{NavMgr.NavigateTo("/login"); }
    </NotAuthorized>
</AuthorizeView>

@code {
    
    [Parameter] public string Email { get; set; }
    
    public User? User { get; set; }
    
    public Chat? Chat { get; set; }

    HubConnection HubConnection;
    
    
    

    protected async override Task OnInitializedAsync() {
        await HubService.InitHubConnection();
        try {
            HubConnection = HubService.HubConnection!;
            await HubConnection?.StartAsync()!;
            await HubConnection.SendAsync("Welcome", AuthService.MyUser.RUI);
            HubService.NotifyNewLogin += NotifyNewLogin;
            HubService.NotifyLogOff += NotifyLogOff;
            await LoadInitialDataByUser();
        } catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
    }
    
    public async void SelectedUser(string email) {
        Email = email;
        await LoadInitialDataByUser();
        StateHasChanged();
    }

    public async void SelectedChat(Guid CUI) {
        await LoadInitialDataByChatNo(CUI);
        await ChatService.SetAsReadMessages(AuthService.MyUser.RUI, Chat);
        RefreshService.CallRequestRefresh();
        StateHasChanged();
    }

    private async Task LoadInitialDataByChatNo(Guid CUI) {
        Chat = await ChatService.GetChat(CUI);
    }

    public async Task LoadInitialDataByUser() {
        if (String.IsNullOrWhiteSpace(Email)) Email = "panchi@gmail.com"; //ADD A WELCOME MESSAGE
        User = await UserService.GetUserAsyncByEmail(Email);
        Chat = await ChatService.GetOrCreateChat(AuthService.MyUser.RUI, User.RUI);
    }
    
    private async void NotifyNewLogin(Guid RUIuser) {
        if (!RUIuser.Equals(AuthService.MyUser.RUI)) {
            User user = await UserService.GetUserAsyncByRUI(RUIuser);
            ToastService.ShowInfo("Hay un nuevo login : " + user.Name); //TODO Do it nice
        }
    }
    
    private async void NotifyLogOff(Guid RUIuser) {
        User user = await UserService.GetUserAsyncByRUI(RUIuser);
        ToastService.ShowInfo("ESTE USUARIO SE DESCONECTO : " + user.Name); //TODO Do it nice
    }

}    
