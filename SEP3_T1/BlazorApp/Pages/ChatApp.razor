@using BlazorApp.Shared.Components
@using Contracts.Services
@using Entities.Model
@using System.Runtime.Intrinsics.Arm
@using BlazorApp.Authentication
@using BlazorApp.Services.Hub
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject IUserService UserService
@inject IChatService ChatService
@inject NavigationManager NavMgr
@inject IAuthService AuthService
@inject HubService HubService
@page "/ChatApp/{email?}"



<AuthorizeView>
    <Authorized>
        @* /TEMPORARY STATUS WINDOW/ *@
        @{ Console.WriteLine("Papa");}
        <div class="temporary">
            @if (hubConnection != null) { //TODO to eliminate
                <p>State: @hubConnection.State</p>
                <p>Id: @hubConnection.ConnectionId</p>
                <p>ServerTimeOut: @hubConnection.ServerTimeout</p>
                <p>KeepAliveInterval: @hubConnection.KeepAliveInterval</p>
                <p>HandShakeTimeOut: @hubConnection.HandshakeTimeout</p>

            }
        </div>
        @* ////////////////////////////////// *@
        
        <CascadingValue Value="hubConnection">
            <main class="main">
                <div class="left-box">
                    <LeftMain/>
                </div>
                <div class="right-box">
                    @if (TheChat != null) {
                        @if (User.RUI.Equals(AuthService.MyUser.RUI)) {
                            <h1>@error</h1>
                        }
                        else {
                            <CascadingValue Value="@TheChat">
                                <CascadingValue Value="@User">
                                    <HeaderRight/>
                                    <MessageArea/>
                                    <InputArea/>
                                </CascadingValue>
                            </CascadingValue>
                        }
                    }
                    else {
                        <h1>USER DOES NOT EXIST</h1>
                    }
                    -
                </div>
            </main>
        </CascadingValue>
    </Authorized>
    <NotAuthorized>
        @{NavMgr.NavigateTo("/login"); }
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter] public string Email { get; set; }
    
    public User User { get; set; }
    
    Entities.Model.Chat TheChat { get; set; }

    string error = String.Empty;

    HubConnection? hubConnection;
    
    protected async override Task OnInitializedAsync() {
        hubConnection = await HubService.GetHubConnection();
        
        Console.WriteLine("Connected with number: " + hubConnection?.ConnectionId);
      

        try {
            User = await UserService.GetUserAsyncByEmail(Email);
            TheChat = await ChatService.GetOrCreateChat(AuthService.MyUser, User);
            StateHasChanged();
        }
        catch (Exception e) {
            error = e.Message;
        }
    }
    

    protected async override Task OnAfterRenderAsync(bool firstRender) {
        // ChatService.MarkAsRead(TheChat.CID, AuthService.MyUser);
    }

}    
