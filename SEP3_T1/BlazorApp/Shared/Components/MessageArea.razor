@using Entities.Model
@using Contracts.Services
@using BlazorApp.Authentication
@using BlazorApp.Services.Hub
@using Microsoft.AspNetCore.SignalR.Client

@inject IAuthService AuthService
@inject IChatService ChatService 

<main class="main">
    @if (Chat != null) {
        if (Chat.Messages != null) {
            foreach (var message in Chat.Messages) {
                <div class="@(AuthService.MyUser.Email.Equals(message.Header.CreatedBy.Email) ? "mine" : "not-mine")">
                    <PlainMessage Message="message" IsMine=@AuthService.MyUser.Email.Equals(message.Header.CreatedBy.Email)></PlainMessage>
                </div>
            }
        }
    }
</main>

@code {
    [CascadingParameter] public Chat? Chat { get; set; }
    
    [CascadingParameter] private HubService HubService { get; set; }


    private HubConnection hubConnection;
    

    protected async override Task OnInitializedAsync() {
        hubConnection = HubService.HubConnection;
        // hubConnection.On("NewMessage", (() => Console.WriteLine("otra vez")));
        HubService.NotifyNewMessage += OnNotify;
        
    }


    //Clear all read messages
    protected async override Task OnAfterRenderAsync(bool firstRender) {

        Console.WriteLine("-------------------------------------");
        await Task.Delay(1000); 
        Console.WriteLine("DESDE MESSAGE AREA: ");
        Console.WriteLine("ESTADO: " + hubConnection?.State);
        Console.WriteLine("ID : " + hubConnection?.ConnectionId);
        Console.WriteLine("-------------------------------------");
        // await ChatService.MarkAsRead(Chat.CID, AuthService.MyUser);
    }
    
    

    public async Task OnNotify() {
        await InvokeAsync((() => {
            Console.WriteLine("Hy un mensaje");
            // StateHasChanged();
        }));
    }

}