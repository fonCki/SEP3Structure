@using BlazorApp.Authentication
@using BlazorApp.Shared.MicroComponents
@using Contracts.Services
@using Contracts.Services.Hub
@using Entities.Model
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject IUserService UserService
@inject IChatService ChatService
@inject IAuthService AuthService
@inject IMessageService MessageService

<main class="main">
    <div class="header">
        <div class="title">
            <div class="back" onclick="@(() => ChangePanel.Invoke(Panel.Starter))">
                       <ToolTip Text="Back">
                       <span class="iconify" data-icon="ant-design:arrow-left-outlined" data-width="22" data-height="22" style="color: white;"></span>
                        </ToolTip>
            </div>
            <h5>New Group</h5>
        </div>
    </div>
    <ChangeableAvatar newImage="@UpdateAvatar" newError="@UpdateError" actualImage="@imagePath"/>
    <input type="text" @bind="@groupName" class="input-group-text" placeholder="Group name"/>
    <div class="users-list">
        @if (availableUsers != null) {
            @foreach (User user in availableUsers) {
                <div class="user-row">
                    <div class="user" onclick="">
                        <Avatar image="@user.Avatar" size="Avatar.Size.Small" />
                        <h6>@user.Name</h6>
                    </div>
                    <div class="check-box">
                        <input type="checkbox" class="form-check-input" @onchange="@(() => IncludeExclude(user) )" />
                    </div>
                </div>
        }
        }
    </div>
        <p class="error-label"> @if (!string.IsNullOrEmpty(errorLabel))@errorLabel</p>
        <div class="save">
            <button class="button-save" @onclick="@CreateGroup">
                <span class="iconify" data-icon="codicon:save-as" style="color: #8696a0;" data-width="25" ></span>
            </button>
    </div>
</main>

@code {
    private string errorLabel;
    private string imagePath;
    private string groupName;

    private ICollection<User> availableUsers;

    private HashSet<User> groupUsers;
    
    [CascadingParameter] private HubService? HubService { get; set;}

    protected override async Task OnParametersSetAsync() {
        imagePath = $"images/group/{GetRandomImage()}";
         errorLabel = string.Empty;
         groupName = string.Empty;
        availableUsers = await UserService.GetContactList();
        availableUsers = availableUsers.OrderBy(u => u.Name).ToList();
        availableUsers.Remove(availableUsers.FirstOrDefault(u => u.RUI.Equals(AuthService.MyUser.RUI)!)!);
        groupUsers = new HashSet<User>();
    }

    [Parameter]
    public Action<Panel> ChangePanel { get; set; }
    
    
    public async void UpdateAvatar(string newPath) {
        imagePath = newPath;
    }
    

    public void UpdateError(string newError) {
        errorLabel = newError;
        StateHasChanged();
    }

    private void IncludeExclude(User user) {
        if (groupUsers.Contains(user)) {
            groupUsers.Remove(user);
        }
        else {
            groupUsers.Add(user);
        }
    }
    
    private async void CreateGroup() {
        if (string.IsNullOrWhiteSpace(groupName) ) {
            errorLabel = "Group must have a name..";
        }
        else {
            if (groupUsers.Count == 0) {
                errorLabel = "Group must have at least a person";
            }
            else {
                Chat groupChat = Chat.CreateGroup(groupName, imagePath, AuthService.MyUser);
                foreach (var user in groupUsers) {
                    groupChat.Subscribers.Add(user);
                }
                Chat chat = await ChatService.AddGroupChat(groupChat);
                Message welcomeMessage = new Message(AuthService.MyUser, chat.CID, $"This is an automatic welcome message to the group that I created \"{groupChat.Name}\", You're very welcome to participate");
                string messageAsJson = JsonSerializer.Serialize(welcomeMessage);
                await HubService?.HubConnection?.SendAsync("SendMessage", messageAsJson)!;
                ChangePanel.Invoke(Panel.Starter);
                availableUsers.Clear();
                StateHasChanged();
            }
        }
    }

    private string GetRandomImage() {
        var files = new DirectoryInfo(@"wwwroot/images/group").GetFiles();
        int index = new Random().Next(0, files.Length);
        return files[index].Name;
    }
}