@using Entities.Model
@using BlazorApp.Authentication
@using Contracts.Services
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using Contracts.Services.Hub
@inject IAuthService AuthService
@inject IChatService ChatService
@inject IMessageService MessageService

<main class="main">
    <ToolTip Text="Share Happiness"><span class="iconify" data-icon="bi:emoji-smile" style="color: #657781;"></span></ToolTip>
    <ToolTip Text="Attach a file"><span class="iconify" data-icon="fluent:attach-12-regular" style="color: #657781;"></span></ToolTip>
    <input type="search" placeholder="Type a message" value="@InputMessage" class="search-field" @onkeydown="@Enter" @oninput=@RefreshValue />
    
    <div class="send" @onclick="@Send"><ToolTip Text="Send"><span class="iconify" data-icon="ant-design:send-outlined" style="color: #657781;"></span></ToolTip></div>
</main>

@code {

    [CascadingParameter] public Chat Chat { get; set; }
    [CascadingParameter] private HubService? HubService { get; set;}


    private HubConnection hubConnection;
    public string InputMessage { get; set; }

    protected async override Task OnInitializedAsync() {
         hubConnection = HubService.HubConnection;
    }
    

    //If I press enter
    public void Enter(KeyboardEventArgs e) {
        if (e.Code == "Enter" || e.Code == "NumpadEnter") {
            Send();
        } 
    }

    //Every time I type a character
    public void RefreshValue(ChangeEventArgs e) {
        InputMessage = e.Value.ToString();

    }

    //Create and send the message
    public async Task Send() {
        if (!String.IsNullOrWhiteSpace(InputMessage)) {
            Message message = new Message(AuthService.MyUser, Chat.CID, InputMessage);
            string messageAsJson = JsonSerializer.Serialize(message);
            await hubConnection.SendAsync("SendMessage", messageAsJson);
            InputMessage = String.Empty;
        }
    }
}