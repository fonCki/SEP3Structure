@using Entities.Model
@using BlazorApp.Authentication
@using Contracts.Services
@using System.Text.Json
@using BlazorApp.Services.Hub
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client;
@inject IAuthService AuthService
@inject IChatService ChatService
@inject HubService HubService

<main class="main">
    <ToolTip Text="Share Happiness"><span class="iconify" data-icon="bi:emoji-smile" style="color: #657781;"></span></ToolTip>
    <ToolTip Text="Attach a file"><span class="iconify" data-icon="fluent:attach-12-regular" style="color: #657781;"></span></ToolTip>
    @* <input type="search" placeholder="Type a message" value="@InputMessage" class="search-field" @onkeydown="@Enter" @oninput=@RefreshValue /> *@
    @* <div class="send" @onclick="@Send"><ToolTip Text="Send"><span class="iconify" data-icon="ant-design:send-outlined" style="color: #657781;"></span></ToolTip></div> *@
        <textarea placeholder="write your message" @bind="inputMessage" @bind:event="oninput"></textarea>
        <button @onclick="@(() => Send(inputMessage))">Send</button>
    
</main>

@code {
    
    Chat Chat { get; set; }
    private Timer timer;
    
    public HubConnection HubConnection;

    protected async override Task OnInitializedAsync() {

    //Set the timer refresh
        timer = new Timer((state => InvokeAsync(StateHasChanged)), null, 0, 1);
            

        await Task.Delay(1);
            


    }

    private string inputMessage;
    
    
    //If I press enter
    // public void Enter(KeyboardEventArgs e) {
    //     if (e.Code == "Enter" || e.Code == "NumpadEnter") {
    //         Send();
    //     } 
    // }

    // //Every time I type a character
    // public void RefreshValue(ChangeEventArgs e) {
    //     InputMessage = e.Value.ToString();
    //
    // }

    

    
    //Create and send the message
    public async Task Send(string inputMessage) {
     if (!String.IsNullOrWhiteSpace(inputMessage)) {
         Message messageToSend = new Message(AuthService.MyUser, Chat.CID, inputMessage);
         string messageAsJson = JsonSerializer.Serialize(messageToSend);         //Convert the messaje to Json
        //await ChatService.SendMessage(message);
         
         // Console.WriteLine("Con no: "+ (HubService.GetHubConnection().State));

        // await HubConnection.SendAsync("Broadcast", messageAsJson);
         inputMessage = String.Empty;
         
         }
    }
}


