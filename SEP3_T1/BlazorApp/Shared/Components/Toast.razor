@using BlazorApp.Services
@using BlazorApp.Config.Toast
@using System.Timers
@using BlazorApp.Shared.MicroComponents


@if (ToastList.Any()) {
    <div class="blazored-toast-container @PositionClass">
        @foreach (var toast in ToastList.OrderBy(x => x.TimeStamp)) {
                 <SingleToast ToastSettings="toast.ToastSettings" ToastId="toast.id" /> 
            }
    </div>
}

@code {
    
    [Inject]
    private IToastService ToastService { get; set; }
    
    [Parameter] public ToastPosition Position { get; set; }
    [Parameter] public int Timeout { get; set; } = 10;



    private string PositionClass { get; set; } = string.Empty;

    internal List<ToastInstance> ToastList { get; set; } = new List<ToastInstance>();

    protected override void OnInitialized() {
        ToastService.OnShow += ShowToast;
        PositionClass = $"position-{Position.ToString().ToLower()}";
    }

    public void RemoveToast(Guid toastId) {
        InvokeAsync((() => {
            var toastInstance = ToastList.SingleOrDefault(x => x.id == toastId);
            ToastList.Remove(toastInstance);
            StateHasChanged();
        }));
    }

    private ToastSettings BuildToastSettings(ToastLevel level, string message, string heading) {
        switch (level) {
            case  ToastLevel.Info:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "info" : heading, message, "blazored-toast-info", "InfoClass", "InfoIconClass");
            case  ToastLevel.Success:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "success" : heading, message, "blazored-toast-success", "SuccessClass", "SuccessIconClass");
            case  ToastLevel.Warning:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "warning" : heading, message, "blazored-toast-warning", "", "akar-icons:circle-alert");
            case  ToastLevel.Error:
                return new ToastSettings(string.IsNullOrWhiteSpace(heading) ? "error" : heading, message, "blazored-toast-error", "", "");
        }
        throw new InvalidOperationException();
    }

    private void ShowToast(ToastLevel level, string message, string heading) {
        InvokeAsync((() => {
            var settings = BuildToastSettings(level, message, heading);
            var toast = new ToastInstance() {
                id = Guid.NewGuid(),
                TimeStamp = DateTime.Now,
                ToastSettings = settings
            };
            
            ToastList.Add(toast);
            var timeout = Timeout * 1000;
            var toastTimer = new Timer(timeout);
            toastTimer.Elapsed += (sender, args) => { RemoveToast((toast.id)); };
            toastTimer.AutoReset = false;
            toastTimer.Start();
            
            StateHasChanged();
        }));

    }

}