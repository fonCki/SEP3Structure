@using BlazorApp.Services
@using BlazorApp.Shared.MicroComponents
@using BlazorApp.Config.DropDownMenu
@using Entities.Model
@using BlazorApp.Authentication
@inject IToastService ToastService
@inject IAuthService AuthService;

<div class="main-header">
    <div class="name-and-avatar" @onclick="@ShowAlert">
    <div class="avatar">
        <ToolTip Text="@groupName" Pos="ToolTip.Position.Button"><Avatar size="Avatar.Size.Medium" image="@groupImage"/></ToolTip>
    
    </div>
        <div class="nickname">
            <h3>@groupName</h3>
        </div>
    </div>
    <div class="menu">
        <div class="search-bar-@(search?"active" : "sleep")">
            <SearchArea text="Search Message" color="white"/>
        </div>
        <div @onclick="@(() => search = !search)">
            @if (search) {
                <ToolTip Text="Back" Pos="ToolTip.Position.Button"><span class="iconify" data-icon="akar-icons:arrow-forward-thick" style="color: #657781;" data-width="20"></span></ToolTip>
            }
            else {
                <ToolTip Text="Search" Pos="ToolTip.Position.Button"><span class="iconify" data-icon="simple-line-icons:magnifier" style="color: #657781;" data-width="20"></span></ToolTip>
            }
        </div>
        <div class="iconify three-dots"><Dropdown DownMenuSettings="DropDownMenuSettings"/></div>
    </div>
</div>

@code {
    
    
    [CascadingParameter] public Chat? Chat { get; set; }
    
    public static bool search = false; // true is shown

    private string groupName;

    private string groupImage;
    
    DropDownMenuSettings DropDownMenuSettings { get; set; }= new DropDownMenuSettings("bi:three-dots-vertical", "Menu", DropDownItems);

    static ICollection<DropDownItem> DropDownItems { get; set; } = new List<DropDownItem>();


    protected async override Task OnParametersSetAsync() {
        await SetNameAndImage();
    }

    protected override void OnInitialized() {
        search = false;
        DropDownItems.Clear();
        DropDownItems.Add(new DropDownItem("New Group", (() => Console.WriteLine("New Group"))));
        DropDownItems.Add(new DropDownItem("Settings", (() => Console.WriteLine("Settings"))));
        DropDownItems.Add(new DropDownItem("Log out", (() => Console.WriteLine("LogOut"))));
    }

    private async Task SetNameAndImage() {
        if (Chat!.IsGroup) {
            groupName = Chat.Name;
            groupImage = Chat.Image;
        }
        else {
            User notMe = Chat!.Subscribers.First(u => !u.RUI.Equals(AuthService.MyUser.RUI));
            groupName = notMe.Name;
            groupImage = notMe.Avatar;
        }
    }
    
    public void ShowAlert() { //TODO delete this thing
        int randomNumber = new Random().Next(1, 4);
        switch (randomNumber) {
            case 1 : {ToastService.ShowInfo("I am a INFO message"); break;}
            case 2 : {ToastService.ShowError("I am a Error message"); break;}
            case 3 : {ToastService.ShowSuccess("I am a Success message"); break;}
            case 4 : {ToastService.ShowWarning("I am a Warning message"); break;}
        }
    }
    
}