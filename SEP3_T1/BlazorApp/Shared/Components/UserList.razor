@inject IUserService userService
@inject IAuthService authService



@using Entities.Model
@using BlazorApp.Authentication
@using Contracts.Services
@using Contracts.Services.Hub

@if (_users != null) {
    <main class="main">
        <div class="header">
            <div class="title">
                <div class="back" onclick="@(() => ChangePanel.Invoke(Panel.Starter))">
                    <ToolTip Text="Back">
                        <span class="iconify" data-icon="ant-design:arrow-left-outlined" data-width="22" data-height="22" style="color: white;"></span>
                    </ToolTip>
                </div>
                <h5>New chat</h5>
            </div>
        </div>
        <div class="search">
            <SearchArea text="Search Contacts"/>
        </div>
        <div class="user-list">
            <MakeScrollList>
                @* ----------Online Users -------------------*@
                @if (online.Any()) {
                    <div class="status">
                        <h4>Online</h4>
                    </div>
                    @foreach (var user in online) {
                        <SingleUser User="@user"/>
                    }
                }
                @* ------------------------------------------- *@
                @* ----------Sleeping Users -------------------*@
                @if (sleeping.Any()) {
                    <div class="status">
                        <h4>Sleeping</h4>
                    </div>
                    @foreach (var user in sleeping) {
                        <SingleUser User="@user"/>
                    }
                }
                @* ------------------------------------------- *@
                @* ----------Offline Users -------------------*@
                @if (offline.Any()) {
                    <div class="status">
                        <h4>Offline</h4>
                    </div>
                    @foreach (var user in offline) {
                        <SingleUser User="@user"/>
                    }
                }
                @* ------------------------------------------- *@
            </MakeScrollList>
        </div>
    </main>
}
@code {
    [CascadingParameter] public Action<Panel> ChangePanel { get; set; }
    [CascadingParameter] private HubService HubService { get; set; }

    private ICollection<User> _users;

    IOrderedEnumerable<User> online, offline, sleeping;


    protected async override Task OnParametersSetAsync() {
        HubService.NotifyLogOff += guid => InvokeAsync(StateHasChanged);
        HubService.NotifyNewLogin += guid => InvokeAsync(StateHasChanged);
        _users = await userService.GetContactList();
        await SortList();

    }

    private async Task SortList() {
        online = _users.Where(x => x.Email != authService.MyUser.Email && x.Status == Entities.Model.Status.Online).OrderBy(u => u.Name); 
        offline = _users.Where(x => x.Email != authService.MyUser.Email && x.Status == Entities.Model.Status.Offline).OrderBy(u => u.Name);
        sleeping = _users.Where(x => x.Email != authService.MyUser.Email && x.Status == Entities.Model.Status.Sleeping).OrderBy(u => u.Name);
    }
    
    
    private async Task UserListHasChange() { //TODO this must show in real time
        _users = await userService.GetContactList();
        await SortList();
        StateHasChanged();
    }
    
    
    
}