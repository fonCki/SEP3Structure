@using System.Data
@using System.Diagnostics
@using BlazorApp.Authentication
@using Contracts.Services
@using Entities.Model
@using System.Collections
@using System.Text.Json
@using Contracts.Services.Hub
@inject IChatService ChatService
@inject IAuthService AuthService

@namespace BlazorApp.Shared.Components

@if (Chats is not null) {
    <main class="main">
        @* <CascadingValue Value="@RefreshChilds"> *@
        <div class="main-@Panel.Starter @starter">
            <HeaderLeft ChangePanel="ChangePanel"/>
            <SearchArea text="Search or start new chat" color="dark"/>
            <MakeScrollList>
                <Virtualize Items="Chats" Context="chat">
                    <SingleChat Chat="chat"/>
                </Virtualize>
            </MakeScrollList>
        </div>
        <div class="main-@Panel.Profile @profile">
            <Profile ChangePanel="ChangePanel"/>
        </div>
        <div class="main-@Panel.Users @users">

            <CascadingValue Value="@ChangePanel">
                <UserList/>
            </CascadingValue>
        </div>

        <div class="main-@Panel.Group @group">
            <Group ChangePanel="@ChangePanel"/>
        </div>
        @* </CascadingValue> *@
    </main>
}
@code {

    public Panel CurrentPanel { get; set; } = Panel.Starter;
    public ICollection<Chat> Chats { get; set; }
    [CascadingParameter] private HubService HubService { get; set; }

    public Action RefreshChilds;

    private Status starter = Status.Active;
    private Status profile = Status.Hidden;
    private Status users = Status.Hidden;
    private Status group = Status.Hidden;
    
    bool UsersView { get; set; } = false;

    protected async override Task OnParametersSetAsync() {
        HubService.NotifyAllNewMessage += OnNotify;
        Chats = await ChatService.GetAllChatsByUser(AuthService.MyUser.RUI);
        if (Chats == null) Chats = new List<Chat>();
        await InitAndSortChats();
    }
    

    public void ChangePanel(Panel panel) {
        CurrentPanel = panel;
        
        switch (CurrentPanel) {
            case Panel.Profile: {
                profile = Status.Active;
                starter = Status.Hidden;
                users = Status.Hidden;
                group = Status.Hidden;
                break;
            }
            case Panel.Users: {
                profile = Status.Hidden;
                starter = Status.Hidden;
                users = Status.Active;
                group = Status.Hidden;
                break;
            }
            case Panel.Starter: {
                profile = Status.Hidden;
                starter = Status.Active;
                users = Status.Hidden;
                group = Status.Hidden;
                break;
            }
            case Panel.Group: {
                profile = Status.Hidden;
                starter = Status.Hidden;
                users = Status.Hidden;
                group = Status.Active;
                break;
            }
        }
        InvokeAsync((() => StateHasChanged()));
    }
    
    public async void OnNotify(Message message) {
        await InvokeAsync((async () => {
            Chats.Clear();
            StateHasChanged();
            Chats = await ChatService.GetAllChatsByUser(AuthService.MyUser.RUI); //TODO this is not the correct aproach
            await InitAndSortChats();
            StateHasChanged();
        }));
    }

    private async Task InitAndSortChats() {
        Chats = Chats.Where(c => c.Messages.Any()).OrderByDescending(c => c.Messages?.First()?.Header.Created!).ToList();
    }

}