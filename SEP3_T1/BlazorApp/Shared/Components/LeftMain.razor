@using System.Data
@using System.Diagnostics
@using BlazorApp.Authentication
@using Contracts.Services
@using Entities.Model
@inject IChatService ChatService
@inject IAuthService AuthService

@namespace BlazorApp.Shared.Components


<main class="main"> 
    <div class="main-@Panel.Starter @starter">
        <HeaderLeft ChangePanel="ChangePanel"/>
        <SearchArea text="Search or start new chat" color="dark"/>
        <MakeScrollList>
            @foreach(Chat chat in Chats) {
                 <SingleChat Chat="chat"/> 
            }
        </MakeScrollList>
    </div>
    <div class="main-@Panel.Profile @profile">
        <Profile ChangePanel="ChangePanel"/>
    </div>
    <div class="main-@Panel.Users @users">
        <UserList ChangePanel="ChangePanel"/>
    </div>
</main>

@code {

    public Panel CurrentPanel { get; set; } = Panel.Starter;
    public ICollection<Chat> Chats { get; set; }

    private Status starter = Status.Active;
    private Status profile = Status.Hidden;
    private Status users = Status.Hidden;
    
    bool UsersView { get; set; } = false;
    
    
    protected async override Task OnInitializedAsync() {
        Chats = await ChatService.GetAllChatsByUser(AuthService.MyUser);
        foreach (var cha in Chats) {
            Console.WriteLine(cha.CID);
        }
        if (Chats == null) Chats = new List<Chat>();
        Chats = Chats.Where(c => c.Messages.Any()).OrderByDescending(c => c.Messages?.First()?.Header.Created!).ToList();
    }

    public void ChangePanel(Panel panel) {
        CurrentPanel = panel;
        
        switch (CurrentPanel) {
            case Panel.Profile: {
                profile = Status.Active;
                starter = Status.Hidden;
                users = Status.Hidden;
                break;
            }
            case Panel.Users: {
                profile = Status.Hidden;
                starter = Status.Hidden;
                users = Status.Active;
                break;
            }
            case Panel.Starter: {
                profile = Status.Hidden;
                starter = Status.Active;
                users = Status.Hidden;
                break;
            }
        }
        StateHasChanged();
    }

}